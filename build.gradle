import nu.studer.gradle.jooq.JooqEdition

buildscript {
    ext.kotlin_version = '1.7.22'
    ext.ktor_version = '1.0.0'

    repositories {
        mavenCentral()
    }
    dependencies {
        // classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.21")
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'application'
    id "org.jetbrains.kotlin.jvm" version "1.7.22"
    id "com.github.ben-manes.versions" version "${gradleVersionsPlugin}"
    id 'nu.studer.jooq' version '6.0'
}

mainClassName = 'example.MainKt'

sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/ktor" }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.5.21")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.12.4")
    implementation "io.ktor:ktor-server-netty:1.6.2"
    implementation "io.ktor:ktor-html-builder:1.6.2"
    implementation "ch.qos.logback:logback-classic:1.2.5"
//    implementation("org.jetbrains.exposed:exposed:${ServerDeps.exposedVersion}")
    // https://mvnrepository.com/artifact/org.jetbrains.exposed/exposed-core
    implementation 'org.jetbrains.exposed:exposed-core:0.33.1'
    implementation("org.jetbrains.exposed:exposed-jdbc:0.33.1")
    implementation("com.zaxxer:HikariCP:4.0.3")


    // JOOQ
    implementation("org.jooq:jooq:${jooqVersion}")

    //postgreSQL
    implementation("org.postgresql:postgresql:${postgresqlVersion}")
    //runtimeOnly("org.postgresql:postgresql:${postgresqlVersion}")
    jooqGenerator "org.postgresql:postgresql:${postgresqlVersion}"
}

jooq {
    version = "${jooqVersion}"
    edition = JooqEdition.OSS
    configurations {
        main {
            generateSchemaSourceOnCompilation = true

               generationTool {
                   jdbc {
                       driver = 'org.postgresql.Driver'
                       url = 'jdbc:postgresql://192.168.10.25:5432/finance_db'
                       user = 'henninb'
                       password = 'monday1'
                   }

                   generator {
                       name = 'org.jooq.codegen.DefaultGenerator'
                       database {
                            name = 'org.jooq.meta.postgres.PostgresDatabase'
                            inputSchema = 'public'
                           forcedTypes {
                               forcedType {
                                   userType = 'example.domain.AccountType'
                                   converter = 'example.utils.AccountTypeConverter'
                                   includeExpression = '.*\\.account_type'
                               }
                               forcedType {
                                   userType = 'example.domain.TransactionState'
                                   converter = 'example.utils.TransactionStateConverter'
                                   includeExpression = '.*\\.transaction_state'
                               }
                               forcedType {
                                   userType = 'example.domain.ReoccurringType'
                                   converter = 'example.utils.ReoccurringTypeConverter'
                                   includeExpression = '.*\\.reoccurring_type'
                               }
                           }
                       }
                       generate {
                           relations = true
                           deprecated = false
                           records = true
                           immutablePojos = true
                           fluentSetters = true
                       }


                       strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                   }
              }
        }

    }
}
